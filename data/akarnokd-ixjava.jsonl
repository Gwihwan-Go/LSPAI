{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).flatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.range(v, 2);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [24, 203]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::normalViaConcatMap", "test_loc": [36, 4], "test": "@Test\npublic void normalViaConcatMap() {\n    Ix<Integer> source = Ix.range(1, 5).concatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.range(v, 2);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6);\n}", "focal_id": "range", "focal_loc": [38, 205]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::just", "test_loc": [48, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).flatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.range(v, 2);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2);\n}", "focal_id": "range", "focal_loc": [50, 199]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::empty", "test_loc": [60, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().flatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.range(v, 2);\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "range", "focal_loc": [62, 208]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::rangeJust", "test_loc": [72, 4], "test": "@Test\npublic void rangeJust() {\n    Ix<Integer> source = Ix.range(1, 2).flatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.just(v);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2);\n}", "focal_id": "just", "focal_loc": [74, 203]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/FlattenIterableTest.java::rangeEmpty", "test_loc": [84, 4], "test": "@Test\npublic void rangeEmpty() {\n    Ix<Integer> source = Ix.range(1, 2).flatMap(new IxFunction<Integer, Iterable<Integer>>() {\n        @Override\n        public Iterable<Integer> apply(Integer v) {\n            return Ix.empty();\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [86, 203]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToArrayTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Object[]> source = Ix.range(1, 10).collectToArray();\n\n    IxTestHelper.assertValues(source, new Object[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });\n}", "focal_id": "collectToArray", "focal_loc": [24, 46]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::minComparator", "test_loc": [24, 4], "test": "@Test\npublic void minComparator() {\n    Ix<Integer> source = Ix.range(1, 5).min(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 5);\n}", "focal_id": "compareTo", "focal_loc": [26, 178]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::minComparatorEmpty", "test_loc": [36, 4], "test": "@Test\npublic void minComparatorEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().min(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "compareTo", "focal_loc": [38, 183]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::minComparatorJust", "test_loc": [48, 4], "test": "@Test\npublic void minComparatorJust() {\n    Ix<Integer> source = Ix.just(1).min(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "compareTo", "focal_loc": [50, 174]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::maxComparator", "test_loc": [60, 4], "test": "@Test\npublic void maxComparator() {\n    Ix<Integer> source = Ix.range(1, 5).max(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "compareTo", "focal_loc": [62, 178]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::maxComparatorEmpty", "test_loc": [72, 4], "test": "@Test\npublic void maxComparatorEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().max(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "compareTo", "focal_loc": [74, 183]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::maxComparatorJust", "test_loc": [84, 4], "test": "@Test\npublic void maxComparatorJust() {\n    Ix<Integer> source = Ix.just(1).max(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "compareTo", "focal_loc": [86, 174]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::min", "test_loc": [96, 4], "test": "@Test\npublic void min() {\n    Ix<Integer> source = Ix.range(1, 5).min();\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "min", "focal_loc": [98, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::minEmpty", "test_loc": [103, 4], "test": "@Test\npublic void minEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().min();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "min", "focal_loc": [105, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::minJust", "test_loc": [110, 4], "test": "@Test\npublic void minJust() {\n    Ix<Integer> source = Ix.just(1).min();\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "min", "focal_loc": [112, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::max", "test_loc": [117, 4], "test": "@Test\npublic void max() {\n    Ix<Integer> source = Ix.range(1, 5).max();\n\n    IxTestHelper.assertValues(source, 5);\n}", "focal_id": "max", "focal_loc": [119, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::maxEmpty", "test_loc": [124, 4], "test": "@Test\npublic void maxEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().max();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "max", "focal_loc": [126, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinMaxTest.java::maxJust", "test_loc": [131, 4], "test": "@Test\npublic void maxJust() {\n    Ix<Integer> source = Ix.just(1).max();\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "max", "focal_loc": [133, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::normalFloat", "test_loc": [22, 4], "test": "@Test\npublic void normalFloat() {\n    Ix<Float> source = Ix.range(1, 5).averageFloat();\n\n    IxTestHelper.assertValues(source, 3f);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageFloat", "focal_loc": [24, 42]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::justFloat", "test_loc": [31, 4], "test": "@Test\npublic void justFloat() {\n    Ix<Float> source = Ix.just(1).averageFloat();\n\n    IxTestHelper.assertValues(source, 1f);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageFloat", "focal_loc": [33, 38]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::emptyFloat", "test_loc": [40, 4], "test": "@Test\npublic void emptyFloat() {\n    Ix<Float> source = Ix.<Integer>empty().averageFloat();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageFloat", "focal_loc": [42, 47]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::normalDouble", "test_loc": [49, 4], "test": "@Test\npublic void normalDouble() {\n    Ix<Double> source = Ix.range(1, 5).averageDouble();\n\n    IxTestHelper.assertValues(source, 3d);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageDouble", "focal_loc": [51, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::justDouble", "test_loc": [58, 4], "test": "@Test\npublic void justDouble() {\n    Ix<Double> source = Ix.just(1).averageDouble();\n\n    IxTestHelper.assertValues(source, 1d);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageDouble", "focal_loc": [60, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AverageTest.java::emptyDouble", "test_loc": [67, 4], "test": "@Test\npublic void emptyDouble() {\n    Ix<Double> source = Ix.<Integer>empty().averageDouble();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "averageDouble", "focal_loc": [69, 48]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToListTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.just(1);\n\n    assertEquals(1, source.iterator().next().intValue());\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "intValue", "focal_loc": [28, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.fromArray(5, 4, 3, 2, 1).orderBy();\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "orderBy", "focal_loc": [26, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normalComparator", "test_loc": [33, 4], "test": "@Test\npublic void normalComparator() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 3, 4, 5).orderBy(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "compareTo", "focal_loc": [35, 195]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normalKeySelector", "test_loc": [47, 4], "test": "@Test\npublic void normalKeySelector() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 3, 4, 5).orderBy(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return 3 - v;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [49, 151]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::empty", "test_loc": [61, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().orderBy();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "orderBy", "focal_loc": [63, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::just", "test_loc": [70, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).orderBy();\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "orderBy", "focal_loc": [72, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normalReverse", "test_loc": [79, 4], "test": "@Test\npublic void normalReverse() {\n    Ix<Integer> source = Ix.range(1, 5).orderByReverse();\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "orderByReverse", "focal_loc": [81, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normalComparatorReverse", "test_loc": [88, 4], "test": "@Test\npublic void normalComparatorReverse() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 3, 4, 5).orderByReverse(new Comparator<Integer>() {\n        @Override\n        public int compare(Integer a, Integer b) {\n            return b.compareTo(a);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "compareTo", "focal_loc": [90, 202]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderByTest.java::normalKeySelectorReverse", "test_loc": [102, 4], "test": "@Test\npublic void normalKeySelectorReverse() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 3, 4, 5).orderByReverse(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return 3 - v;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [104, 158]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).maxInt();\n\n    assertEquals(10L, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [28, 41]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::just", "test_loc": [31, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).maxInt();\n\n    assertEquals(1, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [35, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::empty", "test_loc": [38, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.empty().maxInt();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "maxInt", "focal_loc": [40, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::normalLong", "test_loc": [45, 4], "test": "@Test\npublic void normalLong() {\n    Ix<Long> source = Ix.range(1, 10).toLong().maxLong();\n\n    assertEquals(10L, source.first().longValue());\n}", "focal_id": "longValue", "focal_loc": [49, 41]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::justLong", "test_loc": [52, 4], "test": "@Test\npublic void justLong() {\n    Ix<Long> source = Ix.just(1L).maxLong();\n\n    assertEquals(1L, source.first().longValue());\n}", "focal_id": "longValue", "focal_loc": [56, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MaxTest.java::emptyLong", "test_loc": [59, 4], "test": "@Test\npublic void emptyLong() {\n    Ix<Long> source = Ix.empty().maxLong();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "maxLong", "focal_loc": [61, 37]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::normalArray", "test_loc": [24, 4], "test": "@Test\npublic void normalArray() {\n    @SuppressWarnings(\"unchecked\")\n    Ix<Integer> source = Ix.orderedMergeArray(Ix.fromArray(1, 3), Ix.fromArray(2, 4, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "fromArray", "focal_loc": [27, 73]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::normalIterable", "test_loc": [33, 4], "test": "@Test\npublic void normalIterable() {\n    @SuppressWarnings(\"unchecked\")\n    Ix<Integer> source = Ix.orderedMerge(Ix.fromArray(Ix.fromArray(1, 3), Ix.fromArray(2, 4, 5)));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "fromArray", "focal_loc": [36, 81]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::firstEmptyArray", "test_loc": [42, 4], "test": "@Test\n@SuppressWarnings(\"unchecked\")\npublic void firstEmptyArray() {\n    Ix<Integer> source = Ix.orderedMergeArray(Ix.<Integer>empty(), Ix.fromArray(2, 4, 5));\n\n    IxTestHelper.assertValues(source, 2, 4, 5);\n}", "focal_id": "fromArray", "focal_loc": [45, 74]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::secondEmptyArray", "test_loc": [50, 4], "test": "@Test\n@SuppressWarnings(\"unchecked\")\npublic void secondEmptyArray() {\n    Ix<Integer> source = Ix.orderedMergeArray(Ix.fromArray(1, 3), Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source, 1, 3);\n}", "focal_id": "empty", "focal_loc": [53, 82]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::bothEmptyArray", "test_loc": [58, 4], "test": "@Test\n@SuppressWarnings(\"unchecked\")\npublic void bothEmptyArray() {\n    Ix<Integer> source = Ix.orderedMergeArray(Ix.<Integer>empty(), Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [61, 83]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::comparatorArray", "test_loc": [66, 4], "test": "@Test\npublic void comparatorArray() {\n    @SuppressWarnings(\"unchecked\")\n    Ix<Integer> source = Ix.orderedMergeArray(\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    return o2.compareTo(o1);\n                }\n            },\n            Ix.fromArray(3, 1), Ix.fromArray(5, 4, 2));\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "fromArray", "focal_loc": [69, 319]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::comparatorIterable", "test_loc": [82, 4], "test": "@Test\npublic void comparatorIterable() {\n    @SuppressWarnings(\"unchecked\")\n    Ix<Integer> source = Ix.orderedMerge(Ix.fromArray(Ix.fromArray(3, 1), Ix.fromArray(5, 4, 2)),\n            new Comparator<Integer>() {\n        @Override\n        public int compare(Integer o1, Integer o2) {\n            return o2.compareTo(o1);\n        }\n    }\n    );\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "compareTo", "focal_loc": [85, 251]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/OrderedMergeTest.java::lotsOfIterables", "test_loc": [98, 4], "test": "@Test\npublic void lotsOfIterables() {\n    Ix<Integer> source = Ix.orderedMerge(Ix.repeatValue(Ix.just(1), 30)).sumInt();\n\n    IxTestHelper.assertValues(source, 30);\n}", "focal_id": "sumInt", "focal_loc": [100, 77]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normal", "test_loc": [24, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normal() {\n    Ix<List<Integer>> source = Ix.range(1, 5).buffer(2);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [29, 91]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalExactLength", "test_loc": [34, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalExactLength() {\n    Ix<List<Integer>> source = Ix.range(1, 6).buffer(2);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5, 6));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [39, 91]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalSameSkip", "test_loc": [44, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalSameSkip() {\n    Ix<List<Integer>> source = Ix.range(1, 5).buffer(2, 2);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [49, 91]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalSameSkipExactLength", "test_loc": [54, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalSameSkipExactLength() {\n    Ix<List<Integer>> source = Ix.range(1, 6).buffer(2, 2);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5, 6));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [59, 91]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalSkip", "test_loc": [64, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalSkip() {\n    Ix<List<Integer>> source = Ix.range(1, 5).buffer(2, 3);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(4, 5));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [69, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalSkipShorter", "test_loc": [74, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalSkipShorter() {\n    Ix<List<Integer>> source = Ix.range(1, 4).buffer(2, 3);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(4));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [79, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalSkipShortest", "test_loc": [84, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalSkipShortest() {\n    Ix<List<Integer>> source = Ix.range(1, 3).buffer(2, 3);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [89, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalOverlap", "test_loc": [94, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalOverlap() {\n    Ix<List<Integer>> source = Ix.range(1, 5).buffer(2, 1);\n\n    IxTestHelper.assertValues(source,\n            Arrays.asList(1, 2),\n            Arrays.asList(2, 3),\n            Arrays.asList(3, 4),\n            Arrays.asList(4, 5),\n            Arrays.asList(5));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [104, 23]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalOverlapLonger", "test_loc": [109, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalOverlapLonger() {\n    Ix<List<Integer>> source = Ix.range(1, 10).buffer(3, 1);\n\n    IxTestHelper.assertValues(source,\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(2, 3, 4),\n            Arrays.asList(3, 4, 5),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(5, 6, 7),\n            Arrays.asList(6, 7, 8),\n            Arrays.asList(7, 8, 9),\n            Arrays.asList(8, 9, 10),\n            Arrays.asList(9, 10),\n            Arrays.asList(10)\n        );\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [124, 23]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalOverlapSorter", "test_loc": [130, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalOverlapSorter() {\n    Ix<List<Integer>> source = Ix.range(1, 2).buffer(3, 2);\n\n    IxTestHelper.assertValues(source,\n            Arrays.asList(1, 2)\n        );\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [136, 23]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalOverlapEmpty", "test_loc": [142, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalOverlapEmpty() {\n    Ix<List<Integer>> source = Ix.<Integer>empty().buffer(3, 2);\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "buffer", "focal_loc": [145, 55]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferTest.java::normalOverlapJust", "test_loc": [152, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalOverlapJust() {\n    Ix<List<Integer>> source = Ix.just(1).buffer(3, 2);\n\n    IxTestHelper.assertValues(source, Arrays.asList(1));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [157, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/EqualityHelperTest.java::normal", "test_loc": [25, 4], "test": "@Test\npublic void normal() {\n    assertTrue(INSTANCE.test(1, 1));\n    assertTrue(INSTANCE.test(1, new Integer(1)));\n\n    assertFalse(INSTANCE.test(null, 1));\n    assertFalse(INSTANCE.test(1, null));\n    assertFalse(INSTANCE.test(1, 2));\n\n    assertNotNull(EqualityHelper.valueOf(\"INSTANCE\"));\n\n    assertEquals(1, EqualityHelper.values().length);\n}", "focal_id": "test", "focal_loc": [27, 28]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/LiftTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.just(1).lift(new IxFunction<Iterator<Integer>, Iterator<Integer>>() {\n        @Override\n        public Iterator<Integer> apply(final Iterator<Integer> it) {\n            return new Iterator<Integer>() {\n                @Override\n                public boolean hasNext() {\n                    return it.hasNext();\n                }\n\n                @Override\n                public Integer next() {\n                    return it.next() + 10;\n                }\n\n                @Override\n                public void remove() {\n                    throw new UnsupportedOperationException();\n                }\n            };\n        }\n    });\n\n    IxTestHelper.assertValues(source, 11);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "UnsupportedOperationException", "focal_loc": [26, 642]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SelfComparatorTest.java::normal", "test_loc": [25, 4], "test": "@Test\npublic void normal() {\n    assertEquals(0, INSTANCE.compare(1, 1));\n    assertEquals(0, INSTANCE.compare(1, new Integer(1)));\n\n    assertTrue(INSTANCE.compare(1, 2) < 0);\n\n    assertTrue(INSTANCE.compare(2, 1) > 0);\n\n    assertNotNull(SelfComparator.valueOf(\"INSTANCE\"));\n\n    assertEquals(1, SelfComparator.values().length);\n}", "focal_id": "compare", "focal_loc": [27, 33]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip3Test.java::normal", "test_loc": [29, 4], "test": "@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 2), Ix.range(10, 2), Ix.range(100, 2), sum);\n\n    IxTestHelper.assertValues(source, 111, 114);\n}", "focal_id": "range", "focal_loc": [32, 89]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip3Test.java::firstShorter", "test_loc": [38, 4], "test": "@Test\npublic void firstShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 1), Ix.range(10, 2), Ix.range(100, 2), sum);\n\n    IxTestHelper.assertValues(source, 111);\n}", "focal_id": "range", "focal_loc": [41, 89]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip3Test.java::secondShorter", "test_loc": [47, 4], "test": "@Test\npublic void secondShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 2), Ix.range(100, 2), sum);\n\n    IxTestHelper.assertValues(source, 111, 114);\n}", "focal_id": "range", "focal_loc": [50, 89]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip3Test.java::thirdShorter", "test_loc": [56, 4], "test": "@Test\npublic void thirdShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 3), Ix.range(100, 2), sum);\n\n    IxTestHelper.assertValues(source, 111, 114);\n}", "focal_id": "range", "focal_loc": [59, 89]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip3Test.java::allEmpty", "test_loc": [65, 4], "test": "@Test\npublic void allEmpty() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.<Integer>empty(), Ix.<Integer>empty(), Ix.<Integer>empty(), sum);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [68, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).sumInt();\n\n    assertEquals(55, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [28, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::just", "test_loc": [31, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).sumInt();\n\n    assertEquals(1, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [35, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::empty", "test_loc": [38, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.empty().sumInt();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "sumInt", "focal_loc": [40, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::normalLong", "test_loc": [45, 4], "test": "@Test\npublic void normalLong() {\n    Ix<Long> source = Ix.range(1, 10).toLong().sumLong();\n\n    assertEquals(55L, source.first().longValue());\n}", "focal_id": "longValue", "focal_loc": [49, 41]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::justLong", "test_loc": [52, 4], "test": "@Test\npublic void justLong() {\n    Ix<Long> source = Ix.just(1L).sumLong();\n\n    assertEquals(1, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [56, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SumTest.java::emptyLong", "test_loc": [59, 4], "test": "@Test\npublic void emptyLong() {\n    Ix<Long> source = Ix.empty().sumLong();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "sumLong", "focal_loc": [61, 37]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).minInt();\n\n    assertEquals(1, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [28, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::just", "test_loc": [31, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).minInt();\n\n    assertEquals(1, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [35, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::empty", "test_loc": [38, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.empty().minInt();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "minInt", "focal_loc": [40, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::normalLong", "test_loc": [45, 4], "test": "@Test\npublic void normalLong() {\n    Ix<Long> source = Ix.range(1, 10).toLong().minLong();\n\n    assertEquals(1, source.first().longValue());\n}", "focal_id": "longValue", "focal_loc": [49, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::justLong", "test_loc": [52, 4], "test": "@Test\npublic void justLong() {\n    Ix<Long> source = Ix.just(1L).minLong();\n\n    assertEquals(1L, source.first().longValue());\n}", "focal_id": "longValue", "focal_loc": [56, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/MinTest.java::emptyLong", "test_loc": [59, 4], "test": "@Test\npublic void emptyLong() {\n    Ix<Long> source = Ix.empty().minLong();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "minLong", "focal_loc": [61, 37]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DeferTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.defer(new IxSupplier<Iterable<Integer>>() {\n        int count;\n        @Override\n        public Iterable<Integer> get() {\n            return Ix.range(++count, 2);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2);\n    IxTestHelper.assertValues(source, 2, 3);\n    IxTestHelper.assertValues(source, 3, 4);\n}", "focal_id": "range", "focal_loc": [24, 192]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SplitTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<String> source = Ix.split(\"a|b|c|d\", \"|\");\n\n    IxTestHelper.assertValues(source, \"a\", \"b\", \"c\", \"d\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "split", "focal_loc": [24, 31]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SplitTest.java::normal2", "test_loc": [31, 4], "test": "@Test\npublic void normal2() {\n    Ix<String> source = Ix.split(\"a|b|c|\", \"|\");\n\n    IxTestHelper.assertValues(source, \"a\", \"b\", \"c\", \"\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "split", "focal_loc": [33, 31]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SplitTest.java::normal3", "test_loc": [40, 4], "test": "@Test\npublic void normal3() {\n    Ix<String> source = Ix.split(\"a1|b2|c3\", \"|\");\n\n    IxTestHelper.assertValues(source, \"a1\", \"b2\", \"c3\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "split", "focal_loc": [42, 31]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SplitTest.java::normal4", "test_loc": [49, 4], "test": "@Test\npublic void normal4() {\n    Ix<String> source = Ix.split(\"a1|<b2|c3|<d4\", \"|<\");\n\n    IxTestHelper.assertValues(source, \"a1\", \"b2|c3\", \"d4\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "split", "focal_loc": [51, 31]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SplitTest.java::empty", "test_loc": [58, 4], "test": "@Test\npublic void empty() {\n    Ix<String> source = Ix.split(\"\", \"|\");\n\n    IxTestHelper.assertValues(source, \"\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "split", "focal_loc": [60, 31]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::anyFound", "test_loc": [22, 4], "test": "@Test\npublic void anyFound() {\n    Ix<Boolean> source = Ix.range(1, 5).any(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return v == 3;\n        }\n    });\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [24, 126]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::anyNotFound", "test_loc": [36, 4], "test": "@Test\npublic void anyNotFound() {\n    Ix<Boolean> source = Ix.range(1, 5).any(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return v == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [38, 126]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::anyEmpty", "test_loc": [50, 4], "test": "@Test\npublic void anyEmpty() {\n    Ix<Boolean> source = Ix.<Integer>empty().any(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return v == 3;\n        }\n    });\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [52, 131]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::allTrue", "test_loc": [64, 4], "test": "@Test\npublic void allTrue() {\n    Ix<Boolean> source = Ix.range(1, 5).all(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return v < 6;\n        }\n    });\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [66, 126]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::allFalse", "test_loc": [78, 4], "test": "@Test\npublic void allFalse() {\n    Ix<Boolean> source = Ix.range(1, 5).all(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return false;\n        }\n    });\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [80, 126]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AnyAllTest.java::allEmpty", "test_loc": [92, 4], "test": "@Test\npublic void allEmpty() {\n    Ix<Boolean> source = Ix.<Integer>empty().all(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return false;\n        }\n    });\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "test", "focal_loc": [94, 131]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).takeLast(5);\n\n    IxTestHelper.assertValues(source, 6, 7, 8, 9, 10);\n}", "focal_id": "takeLast", "focal_loc": [24, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::normalTwo", "test_loc": [29, 4], "test": "@Test\npublic void normalTwo() {\n    Ix<Integer> source = Ix.range(1, 2).takeLast(1);\n\n    IxTestHelper.assertValues(source, 2);\n}", "focal_id": "takeLast", "focal_loc": [31, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::normalThree", "test_loc": [36, 4], "test": "@Test\npublic void normalThree() {\n    Ix<Integer> source = Ix.range(1, 16).takeLast(15);\n\n    IxTestHelper.assertValues(source, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n}", "focal_id": "takeLast", "focal_loc": [38, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::zero", "test_loc": [43, 4], "test": "@Test\npublic void zero() {\n    Ix<Integer> source = Ix.range(1, 10).takeLast(0);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "takeLast", "focal_loc": [45, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::all", "test_loc": [50, 4], "test": "@Test\npublic void all() {\n    Ix<Integer> source = Ix.range(1, 10).takeLast(10);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "takeLast", "focal_loc": [52, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::more", "test_loc": [57, 4], "test": "@Test\npublic void more() {\n    Ix<Integer> source = Ix.range(1, 10).takeLast(15);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "takeLast", "focal_loc": [59, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::just", "test_loc": [65, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).takeLast(1);\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "takeLast", "focal_loc": [67, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::empty", "test_loc": [72, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().takeLast(1);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "takeLast", "focal_loc": [74, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/TakeLastTest.java::emptyZero", "test_loc": [79, 4], "test": "@Test\npublic void emptyZero() {\n    Ix<Integer> source = Ix.<Integer>empty().takeLast(0);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "takeLast", "focal_loc": [81, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctUntilChangedTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 3, 1, 1, 4, 4).distinctUntilChanged();\n\n    IxTestHelper.assertValues(source, 1, 2, 1, 3, 1, 4);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "distinctUntilChanged", "focal_loc": [24, 69]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctUntilChangedTest.java::normalComparer", "test_loc": [31, 4], "test": "@Test\npublic void normalComparer() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 3, 1, 1, 4, 4).distinctUntilChanged(new IxPredicate2<Integer, Integer>() {\n        @Override\n        public boolean test(Integer a, Integer b) {\n            return (a & 1) == (b & 1);\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 1, 4);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "return", "focal_loc": [33, 223]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctUntilChangedTest.java::normalSelector", "test_loc": [45, 4], "test": "@Test\npublic void normalSelector() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 3, 1, 1, 4, 4)\n    .distinctUntilChanged(new IxFunction<Integer, Object>() {\n        @Override\n        public Object apply(Integer v) {\n            return v & 1;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 1, 4);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [47, 183]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctUntilChangedTest.java::empty", "test_loc": [60, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().distinctUntilChanged();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "distinctUntilChanged", "focal_loc": [62, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/HasElementsTest.java::empty", "test_loc": [22, 4], "test": "@Test\npublic void empty() {\n    Ix<Boolean> source = Ix.empty().hasElements();\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "hasElements", "focal_loc": [24, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/HasElementsTest.java::nonempty", "test_loc": [29, 4], "test": "@Test\npublic void nonempty() {\n    Ix<Boolean> source = Ix.just(1).hasElements();\n\n    IxTestHelper.assertValues(source, true);\n}", "focal_id": "hasElements", "focal_loc": [31, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::normal", "test_loc": [29, 4], "test": "@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 2), Ix.range(10, 2), Ix.range(100, 2), Ix.range(1000, 2), sum);\n\n    IxTestHelper.assertValues(source, 1111, 1115);\n}", "focal_id": "range", "focal_loc": [32, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::firstShorter", "test_loc": [38, 4], "test": "@Test\npublic void firstShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 1), Ix.range(10, 2), Ix.range(100, 2), Ix.range(1000, 2), sum);\n\n    IxTestHelper.assertValues(source, 1111);\n}", "focal_id": "range", "focal_loc": [41, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::secondShorter", "test_loc": [47, 4], "test": "@Test\npublic void secondShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 2), Ix.range(100, 3), Ix.range(1000, 3), sum);\n\n    IxTestHelper.assertValues(source, 1111, 1115);\n}", "focal_id": "range", "focal_loc": [50, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::thirdShorter", "test_loc": [56, 4], "test": "@Test\npublic void thirdShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 3), Ix.range(100, 2), Ix.range(1000, 3), sum);\n\n    IxTestHelper.assertValues(source, 1111, 1115);\n}", "focal_id": "range", "focal_loc": [59, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::fourthShorter", "test_loc": [65, 4], "test": "@Test\npublic void fourthShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 3), Ix.range(100, 3), Ix.range(1000, 2), sum);\n\n    IxTestHelper.assertValues(source, 1111, 1115);\n}", "focal_id": "range", "focal_loc": [68, 107]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip4Test.java::allEmpty", "test_loc": [74, 4], "test": "@Test\npublic void allEmpty() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.<Integer>empty(), Ix.<Integer>empty(), Ix.<Integer>empty(), Ix.<Integer>empty(), sum);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [77, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ForloopTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.forloop(1, new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer i) {\n            return i <= 5;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer i) {\n            return i + 1;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer i) {\n            return i * i;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 4, 9, 16, 25);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [24, 441]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ForloopTest.java::empty", "test_loc": [46, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.forloop(1, new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer i) {\n            return false;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer i) {\n            return i + 1;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer i) {\n            return i * i;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [48, 440]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).switchIfEmpty(Ix.range(11, 10));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "range", "focal_loc": [26, 62]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::empty", "test_loc": [31, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().switchIfEmpty(Ix.range(11, 10));\n\n    IxTestHelper.assertValues(source, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n}", "focal_id": "range", "focal_loc": [33, 66]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::emptyOther", "test_loc": [38, 4], "test": "@Test\npublic void emptyOther() {\n    Ix<Integer> source = Ix.<Integer>empty().switchIfEmpty(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [40, 75]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::defaultNormal", "test_loc": [45, 4], "test": "@Test\npublic void defaultNormal() {\n    Ix<Integer> source = Ix.range(1, 10).defaultIfEmpty(100);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "defaultIfEmpty", "focal_loc": [47, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::defaultEmpty", "test_loc": [52, 4], "test": "@Test\npublic void defaultEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().defaultIfEmpty(100);\n\n    IxTestHelper.assertValues(source, 100);\n}", "focal_id": "defaultIfEmpty", "focal_loc": [54, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::removeNonEmpty", "test_loc": [59, 4], "test": "@Test\npublic void removeNonEmpty() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n    List<Integer> list2 = IxTestHelper.range(11, 10);\n\n    Ix.from(list).switchIfEmpty(Ix.from(list2)).removeAll();\n\n    IxTestHelper.assertValues(list);\n    IxTestHelper.assertValues(list2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n}", "focal_id": "removeAll", "focal_loc": [64, 52]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SwitchIfEmptyTest.java::removeEmpty", "test_loc": [70, 4], "test": "@Test\npublic void removeEmpty() {\n    List<Integer> list2 = IxTestHelper.range(11, 10);\n\n    Ix.<Integer>empty().switchIfEmpty(Ix.from(list2)).removeAll();\n\n    IxTestHelper.assertValues(list2);\n}", "focal_id": "removeAll", "focal_loc": [74, 58]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::removeNormal", "test_loc": [24, 4], "test": "@Test\npublic void removeNormal() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) != 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 2, 4, 6, 8, 10);\n    IxTestHelper.assertValues(list, 2, 4, 6, 8, 10);\n}", "focal_id": "return", "focal_loc": [28, 162]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::removeAll", "test_loc": [39, 4], "test": "@Test\npublic void removeAll() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return true;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "test", "focal_loc": [43, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::removeNone", "test_loc": [54, 4], "test": "@Test\npublic void removeNone() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return false;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    IxTestHelper.assertValues(list, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "test", "focal_loc": [58, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::removeEmpty", "test_loc": [69, 4], "test": "@Test\npublic void removeEmpty() {\n    List<Integer> list = IxTestHelper.range(1, 0);\n\n    Ix<Integer> source = Ix.from(list).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return true;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "test", "focal_loc": [73, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::retainNormal", "test_loc": [84, 4], "test": "@Test\npublic void retainNormal() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) != 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 3, 5, 7, 9);\n    IxTestHelper.assertValues(list, 1, 3, 5, 7, 9);\n}", "focal_id": "return", "focal_loc": [88, 162]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::retainAll", "test_loc": [99, 4], "test": "@Test\npublic void retainAll() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return true;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    IxTestHelper.assertValues(list, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "test", "focal_loc": [103, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::retainNone", "test_loc": [114, 4], "test": "@Test\npublic void retainNone() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return false;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "test", "focal_loc": [118, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::retainEmpty", "test_loc": [129, 4], "test": "@Test\npublic void retainEmpty() {\n    List<Integer> list = IxTestHelper.range(1, 0);\n\n    Ix<Integer> source = Ix.from(list).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return false;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "test", "focal_loc": [133, 128]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::removeAllDouble", "test_loc": [144, 4], "test": "@Test\npublic void removeAllDouble() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) != 0;\n        }\n    }).remove(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "return", "focal_loc": [148, 327]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RemoveRetainTest.java::retainNoneDouble", "test_loc": [164, 4], "test": "@Test\npublic void retainNoneDouble() {\n    List<Integer> list = IxTestHelper.range(1, 10);\n\n    Ix<Integer> source = Ix.from(list).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) != 0;\n        }\n    }).retain(new IxPredicate<Integer>() {\n        @Override\n        public boolean test(Integer v) {\n            return (v & 1) == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n    IxTestHelper.assertValues(list);\n}", "focal_id": "return", "focal_loc": [168, 327]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).skipLast(5);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n}", "focal_id": "skipLast", "focal_loc": [24, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::normalTwo", "test_loc": [29, 4], "test": "@Test\npublic void normalTwo() {\n    Ix<Integer> source = Ix.range(1, 2).skipLast(1);\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "skipLast", "focal_loc": [31, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::normalThree", "test_loc": [36, 4], "test": "@Test\npublic void normalThree() {\n    Ix<Integer> source = Ix.range(1, 16).skipLast(1);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n}", "focal_id": "skipLast", "focal_loc": [38, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::zero", "test_loc": [43, 4], "test": "@Test\npublic void zero() {\n    Ix<Integer> source = Ix.range(1, 10).skipLast(0);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "skipLast", "focal_loc": [45, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::all", "test_loc": [50, 4], "test": "@Test\npublic void all() {\n    Ix<Integer> source = Ix.range(1, 10).skipLast(10);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skipLast", "focal_loc": [52, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::more", "test_loc": [57, 4], "test": "@Test\npublic void more() {\n    Ix<Integer> source = Ix.range(1, 10).skipLast(15);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skipLast", "focal_loc": [59, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::just", "test_loc": [65, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).skipLast(1);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skipLast", "focal_loc": [67, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::empty", "test_loc": [72, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().skipLast(1);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skipLast", "focal_loc": [74, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipLastTest.java::emptyZero", "test_loc": [79, 4], "test": "@Test\npublic void emptyZero() {\n    Ix<Integer> source = Ix.<Integer>empty().skipLast(0);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skipLast", "focal_loc": [81, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/GenerateStatelessTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.generate(new IxConsumer<IxEmitter<Integer>>() {\n        int count;\n        @Override\n        public void accept(IxEmitter<Integer> t) {\n            t.onNext(++count);\n            if (count == 10) {\n                t.onComplete();\n            }\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "onComplete", "focal_loc": [26, 272]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/GenerateStatelessTest.java::empty", "test_loc": [40, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.generate(new IxConsumer<IxEmitter<Integer>>() {\n        @Override\n        public void accept(IxEmitter<Integer> t) {\n            t.onComplete();\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "onComplete", "focal_loc": [42, 175]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<String> source = Ix.range(1, 5).join();\n\n    IxTestHelper.assertValues(source, \"1, 2, 3, 4, 5\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [24, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::just", "test_loc": [31, 4], "test": "@Test\npublic void just() {\n    Ix<String> source = Ix.just(1).join();\n\n    IxTestHelper.assertValues(source, \"1\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [33, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::empty", "test_loc": [40, 4], "test": "@Test\npublic void empty() {\n    Ix<String> source = Ix.empty().join();\n\n    IxTestHelper.assertValues(source, \"\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [42, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::normalSeparator", "test_loc": [49, 4], "test": "@Test\npublic void normalSeparator() {\n    Ix<String> source = Ix.range(1, 5).join(\"|\");\n\n    IxTestHelper.assertValues(source, \"1|2|3|4|5\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [51, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::justSeparator", "test_loc": [58, 4], "test": "@Test\npublic void justSeparator() {\n    Ix<String> source = Ix.just(1).join(\"|\");\n\n    IxTestHelper.assertValues(source, \"1\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [60, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JoinTest.java::emptySeparator", "test_loc": [67, 4], "test": "@Test\npublic void emptySeparator() {\n    Ix<String> source = Ix.empty().join(\"|\");\n\n    IxTestHelper.assertValues(source, \"\");\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "join", "focal_loc": [69, 39]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipArrayTest.java::normal", "test_loc": [29, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.zip(new Iterable[] {\n            Ix.range(1, 2), Ix.range(10, 2) },\n            zipper);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [33, 88]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipArrayTest.java::firstShorter", "test_loc": [40, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void firstShorter() {\n\n    Ix<Integer> source = Ix.zip(new Iterable[] {\n            Ix.range(1, 1), Ix.range(10, 2) },\n            zipper);\n\n    IxTestHelper.assertValues(source, 11);\n}", "focal_id": "range", "focal_loc": [44, 88]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipArrayTest.java::secondShorter", "test_loc": [51, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void secondShorter() {\n\n    Ix<Integer> source = Ix.zip(new Iterable[] {\n            Ix.range(1, 3), Ix.range(10, 2) },\n            zipper);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [55, 88]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipArrayTest.java::bothEmpty", "test_loc": [62, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void bothEmpty() {\n\n    Ix<Integer> source = Ix.zip(new Iterable[] {\n            Ix.empty(), Ix.empty() },\n            zipper);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [66, 84]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 3, 4, 2).distinct();\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4);\n}", "focal_id": "distinct", "focal_loc": [24, 63]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctTest.java::empty", "test_loc": [29, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().distinct();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "distinct", "focal_loc": [31, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/DistinctTest.java::normalSelector", "test_loc": [36, 4], "test": "@Test\npublic void normalSelector() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 3, 4, 2).distinct(new IxFunction<Integer, Object>() {\n        @Override\n        public Object apply(Integer v) {\n            return v & 1;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 2);\n}", "focal_id": "apply", "focal_loc": [38, 156]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.repeatValue(1).take(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "take", "focal_loc": [26, 47]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::normalLimited", "test_loc": [33, 4], "test": "@Test\npublic void normalLimited() {\n    Ix<Integer> source = Ix.repeatValue(1, 5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeatValue", "focal_loc": [35, 32]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::neverRepeat", "test_loc": [42, 4], "test": "@Test\npublic void neverRepeat() {\n    Ix<Integer> source = Ix.repeatValue(1, 0);\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeatValue", "focal_loc": [44, 32]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::repeatOnce", "test_loc": [51, 4], "test": "@Test\npublic void repeatOnce() {\n    Ix<Integer> source = Ix.repeatValue(1, 1);\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeatValue", "focal_loc": [53, 32]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateLimited", "test_loc": [60, 4], "test": "@Test\npublic void predicateLimited() {\n    Ix<Integer> source = Ix.repeatValue(1, new IxBooleanSupplier() {\n        int count = 5;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [62, 149]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateNeverRepeat", "test_loc": [75, 4], "test": "@Test\npublic void predicateNeverRepeat() {\n    Ix<Integer> source = Ix.repeatValue(1, new IxBooleanSupplier() {\n        @Override\n        public boolean getAsBoolean() {\n            return true;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [77, 122]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateRepeatOnce", "test_loc": [89, 4], "test": "@Test\npublic void predicateRepeatOnce() {\n    Ix<Integer> source = Ix.repeatValue(1, new IxBooleanSupplier() {\n        int count = 1;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [91, 149]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateInfinite", "test_loc": [104, 4], "test": "@Test\npublic void predicateInfinite() {\n    Ix<Integer> source = Ix.repeatValue(1, new IxBooleanSupplier() {\n        @Override\n        public boolean getAsBoolean() {\n            return false;\n        }\n    }).take(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "take", "focal_loc": [106, 194]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateCountedLimited", "test_loc": [118, 4], "test": "@Test\npublic void predicateCountedLimited() {\n    Ix<Integer> source = Ix.repeatValue(1, 3L, new IxBooleanSupplier() {\n        int count = 5;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [120, 153]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::normalInstance", "test_loc": [133, 4], "test": "@Test\npublic void normalInstance() {\n    Ix<Integer> source = Ix.just(1).repeat().take(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "take", "focal_loc": [135, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::normalInstanceLimited", "test_loc": [142, 4], "test": "@Test\npublic void normalInstanceLimited() {\n    Ix<Integer> source = Ix.just(1).repeat(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeat", "focal_loc": [144, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::neverRepeatInstance", "test_loc": [151, 4], "test": "@Test\npublic void neverRepeatInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(0);\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeat", "focal_loc": [153, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::repeatOnceInstance", "test_loc": [160, 4], "test": "@Test\npublic void repeatOnceInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(1);\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "repeat", "focal_loc": [162, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateLimitedInstance", "test_loc": [169, 4], "test": "@Test\npublic void predicateLimitedInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(new IxBooleanSupplier() {\n        int count = 5;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [171, 149]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateNeverRepeatInstance", "test_loc": [184, 4], "test": "@Test\npublic void predicateNeverRepeatInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(new IxBooleanSupplier() {\n        @Override\n        public boolean getAsBoolean() {\n            return true;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [186, 122]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateRepeatOnceInstance", "test_loc": [198, 4], "test": "@Test\npublic void predicateRepeatOnceInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(new IxBooleanSupplier() {\n        int count = 1;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [200, 149]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateInfiniteInstance", "test_loc": [213, 4], "test": "@Test\npublic void predicateInfiniteInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(new IxBooleanSupplier() {\n        @Override\n        public boolean getAsBoolean() {\n            return false;\n        }\n    }).take(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "take", "focal_loc": [215, 194]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::predicateCountedLimitedInstance", "test_loc": [227, 4], "test": "@Test\npublic void predicateCountedLimitedInstance() {\n    Ix<Integer> source = Ix.just(1).repeat(3L, new IxBooleanSupplier() {\n        int count = 5;\n        @Override\n        public boolean getAsBoolean() {\n            return count-- == 0;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "getAsBoolean", "focal_loc": [229, 153]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/RepeatTest.java::repeatCallable", "test_loc": [242, 4], "test": "@Test\npublic void repeatCallable() {\n    Ix<Integer> source = Ix.repeatCallable(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n            return 1;\n        }\n    })\n    .take(5);\n\n    IxTestHelper.assertValues(source, 1, 1, 1, 1, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "take", "focal_loc": [244, 208]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ReverseTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).reverse();\n\n    IxTestHelper.assertValues(source, 5, 4, 3, 2, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "reverse", "focal_loc": [24, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ReverseTest.java::empty", "test_loc": [31, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().reverse();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "reverse", "focal_loc": [33, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).skip(5);\n\n    IxTestHelper.assertValues(source, 6, 7, 8, 9, 10);\n}", "focal_id": "skip", "focal_loc": [24, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipTest.java::zero", "test_loc": [29, 4], "test": "@Test\npublic void zero() {\n    Ix<Integer> source = Ix.range(1, 10).skip(0);\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n}", "focal_id": "skip", "focal_loc": [31, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipTest.java::all", "test_loc": [36, 4], "test": "@Test\npublic void all() {\n    Ix<Integer> source = Ix.range(1, 10).skip(10);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skip", "focal_loc": [38, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipTest.java::empty", "test_loc": [43, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().skip(10);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skip", "focal_loc": [45, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SkipTest.java::emptyZero", "test_loc": [50, 4], "test": "@Test\npublic void emptyZero() {\n    Ix<Integer> source = Ix.<Integer>empty().skip(0);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "skip", "focal_loc": [52, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::distinct", "test_loc": [22, 4], "test": "@Test\npublic void distinct() {\n    Ix<Integer> source = Ix.range(1, 5).union(Ix.range(6, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [24, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::overlap", "test_loc": [31, 4], "test": "@Test\npublic void overlap() {\n    Ix<Integer> source = Ix.range(1, 5).union(Ix.range(3, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [33, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::overlapReverse", "test_loc": [40, 4], "test": "@Test\npublic void overlapReverse() {\n    Ix<Integer> source = Ix.range(3, 5).union(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 3, 4, 5, 6, 7, 1, 2);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [42, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::same", "test_loc": [50, 4], "test": "@Test\npublic void same() {\n    Ix<Integer> source = Ix.range(1, 5).union(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [52, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::firstInSecond", "test_loc": [59, 4], "test": "@Test\npublic void firstInSecond() {\n    Ix<Integer> source = Ix.range(1, 3).union(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [61, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::secondInFirst", "test_loc": [68, 4], "test": "@Test\npublic void secondInFirst() {\n    Ix<Integer> source = Ix.range(1, 5).union(Ix.range(1, 3));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [70, 53]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::firstEmpty", "test_loc": [77, 4], "test": "@Test\npublic void firstEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().union(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [79, 58]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::secondEmpty", "test_loc": [86, 4], "test": "@Test\npublic void secondEmpty() {\n    Ix<Integer> source = Ix.range(1, 5).union(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "empty", "focal_loc": [88, 62]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::bothEmpty", "test_loc": [95, 4], "test": "@Test\npublic void bothEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().union(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "empty", "focal_loc": [97, 67]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/UnionTest.java::duplicates", "test_loc": [104, 4], "test": "@Test\npublic void duplicates() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 1, 4, 5).union(Ix.fromArray(2, 3, 1, 5, 4));\n\n    IxTestHelper.assertValues(source, 1, 2, 4, 5, 3);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "fromArray", "focal_loc": [106, 69]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IgnoreElementsTest.java::range", "test_loc": [22, 4], "test": "@Test\npublic void range() {\n    Ix<Integer> source = Ix.range(1, 5).ignoreElements();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "ignoreElements", "focal_loc": [24, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IgnoreElementsTest.java::empty", "test_loc": [31, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().ignoreElements();\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "ignoreElements", "focal_loc": [33, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).scan(new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1, 3, 6, 10, 15);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [24, 145]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::just", "test_loc": [36, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).scan(new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [38, 141]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::empty", "test_loc": [50, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.<Integer>empty().scan(new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [52, 150]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::normalSeed", "test_loc": [64, 4], "test": "@Test\npublic void normalSeed() {\n    Ix<Integer> source = Ix.range(1, 5).scan(new IxSupplier<Integer>() {\n        @Override\n        public Integer get() {\n            return 100;\n        }\n    },new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 100, 101, 103, 106, 110, 115);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [66, 282]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::justSeed", "test_loc": [83, 4], "test": "@Test\npublic void justSeed() {\n    Ix<Integer> source = Ix.just(1).scan(new IxSupplier<Integer>() {\n        @Override\n        public Integer get() {\n            return 100;\n        }\n    }, new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 100, 101);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [85, 279]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ScanTest.java::emptySeed", "test_loc": [102, 4], "test": "@Test\npublic void emptySeed() {\n    Ix<Integer> source = Ix.<Integer>empty().scan(new IxSupplier<Integer>() {\n        @Override\n        public Integer get() {\n            return 100;\n        }\n    }, new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer t1, Integer t2) {\n            return t1 + t2;\n        }\n    });\n\n    IxTestHelper.assertValues(source, 100);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "apply", "focal_loc": [104, 288]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Boolean> source = Ix.range(1, 5).contains(3);\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [24, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::normalNoReferenceEquals", "test_loc": [31, 4], "test": "@Test\npublic void normalNoReferenceEquals() {\n    Ix<Boolean> source = Ix.range(1, 5).contains(new Integer(3));\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "Integer", "focal_loc": [33, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::doesntContain", "test_loc": [40, 4], "test": "@Test\npublic void doesntContain() {\n    Ix<Boolean> source = Ix.range(1, 5).contains(6);\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [42, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::doesntContainNull", "test_loc": [49, 4], "test": "@Test\npublic void doesntContainNull() {\n    Ix<Boolean> source = Ix.range(1, 5).contains(null);\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [51, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::empty", "test_loc": [58, 4], "test": "@Test\npublic void empty() {\n    Ix<Boolean> source = Ix.empty().contains(6);\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [60, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::justNull", "test_loc": [67, 4], "test": "@Test\npublic void justNull() {\n    Ix<Boolean> source = Ix.just(null).contains(6);\n\n    IxTestHelper.assertValues(source, false);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [69, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ContainsTest.java::justNullContains", "test_loc": [76, 4], "test": "@Test\npublic void justNullContains() {\n    Ix<Boolean> source = Ix.just(null).contains(null);\n\n    IxTestHelper.assertValues(source, true);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "contains", "focal_loc": [78, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AggregateTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.range(1, 10).sumInt();\n\n    IxTestHelper.assertValues(source, 55);\n}", "focal_id": "sumInt", "focal_loc": [25, 45]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AggregateTest.java::just", "test_loc": [30, 4], "test": "@Test\npublic void just() {\n\n    Ix<Integer> source = Ix.just(1).sumInt();\n\n    IxTestHelper.assertValues(source, 1);\n}", "focal_id": "sumInt", "focal_loc": [33, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/AggregateTest.java::empty", "test_loc": [38, 4], "test": "@Test\npublic void empty() {\n\n    Ix<Integer> source = Ix.<Integer>empty().sumInt();\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "sumInt", "focal_loc": [41, 49]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/EmptyActionTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    assertNotNull(IxEmptyAction.valueOf(\"INSTANCE\"));\n\n    assertEquals(1, IxEmptyAction.values().length);\n}", "focal_id": "valueOf", "focal_loc": [26, 36]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipIterableTest.java::normal", "test_loc": [35, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.zip(Arrays.asList(\n            Ix.range(1, 2), Ix.range(10, 2)),\n            zipper);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [39, 86]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipIterableTest.java::normalMany", "test_loc": [46, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalMany() {\n\n    Ix<Integer> source = Ix.zip(Arrays.asList(\n            Ix.range(1, 2), Ix.range(1, 2),\n            Ix.range(1, 2), Ix.range(1, 2),\n            Ix.range(1, 2), Ix.range(1, 2),\n            Ix.range(1, 2), Ix.range(1, 2),\n            Ix.range(1, 2), Ix.range(1, 2),\n            Ix.range(1, 2), Ix.range(1, 2)\n            ),\n            zipper);\n\n    IxTestHelper.assertValues(source, 12, 24);\n}", "focal_id": "range", "focal_loc": [50, 326]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipIterableTest.java::firstShorter", "test_loc": [63, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void firstShorter() {\n\n    Ix<Integer> source = Ix.zip(Arrays.asList(\n            Ix.range(1, 1), Ix.range(10, 2) ),\n            zipper);\n\n    IxTestHelper.assertValues(source, 11);\n}", "focal_id": "range", "focal_loc": [67, 86]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipIterableTest.java::secondShorter", "test_loc": [74, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void secondShorter() {\n\n    Ix<Integer> source = Ix.zip(Arrays.asList(\n            Ix.range(1, 3), Ix.range(10, 2) ),\n            zipper);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [78, 86]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ZipIterableTest.java::bothEmpty", "test_loc": [85, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void bothEmpty() {\n\n    Ix<Integer> source = Ix.zip(Arrays.asList(\n            Ix.empty(), Ix.empty() ),\n            zipper);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [89, 82]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).count();\n\n    IxTestHelper.assertValues(source, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "count", "focal_loc": [24, 44]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::just", "test_loc": [31, 4], "test": "@Test\npublic void just() {\n    Ix<Integer> source = Ix.just(1).count();\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "count", "focal_loc": [33, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::empty", "test_loc": [40, 4], "test": "@Test\npublic void empty() {\n    Ix<Integer> source = Ix.empty().count();\n\n    IxTestHelper.assertValues(source, 0);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "count", "focal_loc": [42, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::normalLong", "test_loc": [49, 4], "test": "@Test\npublic void normalLong() {\n    Ix<Long> source = Ix.range(1, 5).countLong();\n\n    IxTestHelper.assertValues(source, 5L);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "countLong", "focal_loc": [51, 41]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::justLong", "test_loc": [58, 4], "test": "@Test\npublic void justLong() {\n    Ix<Long> source = Ix.just(1).countLong();\n\n    IxTestHelper.assertValues(source, 1L);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "countLong", "focal_loc": [60, 37]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CountTest.java::emptyLong", "test_loc": [67, 4], "test": "@Test\npublic void emptyLong() {\n    Ix<Long> source = Ix.empty().countLong();\n\n    IxTestHelper.assertValues(source, 0L);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "countLong", "focal_loc": [69, 37]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/CollectTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer[]> source = Ix.range(1, 10).collect(new IxSupplier<Integer[]>() {\n        @Override\n        public Integer[] get() {\n            return new Integer[] { 0 };\n        }\n    }, new IxConsumer2<Integer[], Integer>() {\n        @Override\n        public void accept(Integer[] a, Integer b) {\n            a[0] += b;\n        }\n    });\n\n    assertEquals(55, source.first()[0].intValue());\n}", "focal_id": "intValue", "focal_loc": [38, 43]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::splitNormal", "test_loc": [24, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void splitNormal() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 3, 10, 4)\n            .bufferSplit(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(3), Arrays.asList(4));\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [35, 88]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::splitNormalEmpty", "test_loc": [39, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void splitNormalEmpty() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 10)\n            .bufferSplit(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.<Integer>asList());\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [50, 79]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::whileNormal", "test_loc": [54, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void whileNormal() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 3, 10, 4)\n            .bufferWhile(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v != 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(10, 3), Arrays.asList(10, 4));\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [65, 92]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::whileNormalEmpty", "test_loc": [69, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void whileNormalEmpty() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 10)\n            .bufferWhile(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v != 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2), Arrays.asList(10), Arrays.asList(10));\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [80, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::untilNormal", "test_loc": [84, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void untilNormal() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 3, 10, 4)\n            .bufferUntil(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2, 10), Arrays.asList(3, 10), Arrays.asList(4));\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [95, 96]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::untilNormalEmpty", "test_loc": [99, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void untilNormalEmpty() {\n    Ix<List<Integer>> source = Ix.fromArray(1, 2, 10, 10)\n            .bufferUntil(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source, Arrays.asList(1, 2, 10), Arrays.asList(10));\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [110, 74]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::splitEmpty", "test_loc": [114, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void splitEmpty() {\n    Ix<List<Integer>> source = Ix.<Integer>empty().bufferSplit(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "test", "focal_loc": [117, 161]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::whileEmpty", "test_loc": [127, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void whileEmpty() {\n    Ix<List<Integer>> source = Ix.<Integer>empty().bufferWhile(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v != 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "test", "focal_loc": [130, 161]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/BufferPredicateTest.java::untilEmpty", "test_loc": [140, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void untilEmpty() {\n    Ix<List<Integer>> source = Ix.<Integer>empty().bufferUntil(new IxPredicate<Integer>() {\n                @Override\n                public boolean test(Integer v) {\n                    return v == 10;\n                }\n            });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "test", "focal_loc": [143, 161]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/JustTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.just(1);\n\n    IxTestHelper.assertValues(source, 1);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "just", "focal_loc": [24, 32]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip2Test.java::normal", "test_loc": [29, 4], "test": "@Test\npublic void normal() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 2), Ix.range(10, 2), sum);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [32, 72]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip2Test.java::firstShorter", "test_loc": [38, 4], "test": "@Test\npublic void firstShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 1), Ix.range(10, 2), sum);\n\n    IxTestHelper.assertValues(source, 11);\n}", "focal_id": "range", "focal_loc": [41, 72]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip2Test.java::secondShorter", "test_loc": [47, 4], "test": "@Test\npublic void secondShorter() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.range(1, 3), Ix.range(10, 2), sum);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [50, 72]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip2Test.java::bothEmpty", "test_loc": [56, 4], "test": "@Test\npublic void bothEmpty() {\n\n    Ix<Integer> source = Ix.zip(\n            Ix.<Integer>empty(), Ix.<Integer>empty(), sum);\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "empty", "focal_loc": [59, 86]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/Zip2Test.java::normalWith", "test_loc": [65, 4], "test": "@Test\npublic void normalWith() {\n\n    Ix<Integer> source = Ix.range(1, 2).zipWith(Ix.range(10, 2), sum);\n\n    IxTestHelper.assertValues(source, 11, 13);\n}", "focal_id": "range", "focal_loc": [68, 55]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IntersectTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).intersect(Ix.range(3, 5));\n\n    IxTestHelper.assertValues(source, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [24, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IntersectTest.java::same", "test_loc": [31, 4], "test": "@Test\npublic void same() {\n    Ix<Integer> source = Ix.range(1, 5).intersect(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [33, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IntersectTest.java::distinct", "test_loc": [40, 4], "test": "@Test\npublic void distinct() {\n    Ix<Integer> source = Ix.range(1, 5).intersect(Ix.range(6, 5));\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [42, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IntersectTest.java::distinctEmptyFirst", "test_loc": [49, 4], "test": "@Test\npublic void distinctEmptyFirst() {\n    Ix<Integer> source = Ix.<Integer>empty().intersect(Ix.range(6, 5));\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [51, 62]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/IntersectTest.java::distinctEmptySecond", "test_loc": [58, 4], "test": "@Test\npublic void distinctEmptySecond() {\n    Ix<Integer> source = Ix.range(1, 5).intersect(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "empty", "focal_loc": [60, 66]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Boolean> source = Ix.range(1, 5).sequenceEqual(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, true);\n}", "focal_id": "range", "focal_loc": [24, 61]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::firstSorter", "test_loc": [29, 4], "test": "@Test\npublic void firstSorter() {\n    Ix<Boolean> source = Ix.range(1, 4).sequenceEqual(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "range", "focal_loc": [31, 61]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::secondSorter", "test_loc": [36, 4], "test": "@Test\npublic void secondSorter() {\n    Ix<Boolean> source = Ix.range(1, 5).sequenceEqual(Ix.range(1, 4));\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "range", "focal_loc": [38, 61]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::firstEmpty", "test_loc": [43, 4], "test": "@Test\npublic void firstEmpty() {\n    Ix<Boolean> source = Ix.<Integer>empty().sequenceEqual(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "range", "focal_loc": [45, 66]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::secondEmpty", "test_loc": [50, 4], "test": "@Test\npublic void secondEmpty() {\n    Ix<Boolean> source = Ix.range(1, 5).sequenceEqual(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "empty", "focal_loc": [52, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::empty", "test_loc": [56, 4], "test": "@Test\npublic void empty() {\n    Ix<Boolean> source = Ix.empty().sequenceEqual(Ix.empty());\n\n    IxTestHelper.assertValues(source, true);\n}", "focal_id": "empty", "focal_loc": [58, 57]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/SequenceEqualTest.java::different", "test_loc": [63, 4], "test": "@Test\npublic void different() {\n    Ix<Boolean> source = Ix.fromArray(1, 2, 3, 3, 5).sequenceEqual(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, false);\n}", "focal_id": "range", "focal_loc": [65, 74]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToSetTest.java::normal", "test_loc": [24, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normal() {\n    Ix<Set<Integer>> source = Ix.range(1, 5).collectToSet();\n\n    IxTestHelper.assertValues(source, new HashSet<Integer>(Arrays.asList(1, 2, 3, 4, 5)));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [29, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToSetTest.java::empty", "test_loc": [34, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void empty() {\n    Ix<Set<Integer>> source = Ix.<Integer>empty().collectToSet();\n\n    IxTestHelper.assertValues(source, new HashSet<Integer>());\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "collectToSet", "focal_loc": [37, 54]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToSetTest.java::duplicates", "test_loc": [44, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void duplicates() {\n    Ix<Set<Integer>> source = Ix.fromArray(1, 2, 2, 3, 2, 4, 5, 1, 5).collectToSet();\n\n    IxTestHelper.assertValues(source, new HashSet<Integer>(Arrays.asList(1, 2, 3, 4, 5)));\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "asList", "focal_loc": [49, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::normal", "test_loc": [22, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 5).except(Ix.range(3, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 6, 7);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [24, 54]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::firstEmpty", "test_loc": [31, 4], "test": "@Test\npublic void firstEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().except(Ix.range(3, 5));\n\n    IxTestHelper.assertValues(source, 3, 4, 5, 6, 7);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [33, 59]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::secondEmpty", "test_loc": [40, 4], "test": "@Test\npublic void secondEmpty() {\n    Ix<Integer> source = Ix.range(1, 5).except(Ix.<Integer>empty());\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "empty", "focal_loc": [42, 63]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::firstInSecond", "test_loc": [49, 4], "test": "@Test\npublic void firstInSecond() {\n    Ix<Integer> source = Ix.range(1, 5).except(Ix.range(1, 3));\n\n    IxTestHelper.assertValues(source, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [51, 54]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::firstInFirst", "test_loc": [58, 4], "test": "@Test\npublic void firstInFirst() {\n    Ix<Integer> source = Ix.range(1, 3).except(Ix.range(1, 5));\n\n    IxTestHelper.assertValues(source, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [60, 54]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::distinct", "test_loc": [67, 4], "test": "@Test\npublic void distinct() {\n    Ix<Integer> source = Ix.range(1, 5).except(Ix.range(6, 5));\n\n    IxTestHelper.assertValues(source, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [69, 54]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ExceptTest.java::overlapWithDuplicates", "test_loc": [76, 4], "test": "@Test\npublic void overlapWithDuplicates() {\n    Ix<Integer> source = Ix.fromArray(1, 2, 2, 3, 4, 5).except(Ix.range(1, 3));\n\n    IxTestHelper.assertValues(source, 4, 5);\n\n    IxTestHelper.assertNoRemove(source);\n}", "focal_id": "range", "focal_loc": [78, 70]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ReduceTest.java::normal", "test_loc": [24, 4], "test": "@Test\npublic void normal() {\n    Ix<Integer> source = Ix.range(1, 10).reduce(new IxSupplier<Integer>() {\n        @Override\n        public Integer get() {\n            return 0;\n        }\n    }, new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer a, Integer b) {\n            return a + b;\n        }\n    });\n\n    assertEquals(55, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [38, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ReduceTest.java::aggregate", "test_loc": [41, 4], "test": "@Test\npublic void aggregate() {\n    Ix<Integer> source = Ix.range(1, 10).reduce(new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer a, Integer b) {\n            return a + b;\n        }\n    });\n\n    assertEquals(55, source.first().intValue());\n}", "focal_id": "intValue", "focal_loc": [50, 40]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ReduceTest.java::aggregateEmpty", "test_loc": [53, 4], "test": "@Test\npublic void aggregateEmpty() {\n    Ix<Integer> source = Ix.<Integer>empty().reduce(new IxFunction2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer a, Integer b) {\n            return a + b;\n        }\n    });\n\n    IxTestHelper.assertValues(source);\n}", "focal_id": "apply", "focal_loc": [55, 152]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::normal", "test_loc": [24, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normal() {\n    Ix<Map<Integer, Integer>> source = Ix.range(1, 5).collectToMap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    });\n\n    Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n    map.put(1, 4);\n    map.put(0, 3);\n    map.put(2, 5);\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "put", "focal_loc": [37, 12]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::normalValueSelector", "test_loc": [42, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void normalValueSelector() {\n    Ix<Map<Integer, Integer>> source = Ix.range(1, 5).collectToMap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v * v;\n        }\n    });\n\n    Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n    map.put(1, 16);\n    map.put(0, 9);\n    map.put(2, 25);\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "put", "focal_loc": [60, 12]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::empty", "test_loc": [64, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void empty() {\n    Ix<Map<Integer, Integer>> source = Ix.<Integer>empty().collectToMap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    });\n\n    Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "apply", "focal_loc": [67, 162]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::multimap", "test_loc": [79, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void multimap() {\n    Ix<Map<Integer, Collection<Integer>>> source = Ix.range(1, 5).collectToMultimap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    });\n\n    Map<Integer, Collection<Integer>> map = new HashMap<Integer, Collection<Integer>>();\n    map.put(1, Arrays.asList(1, 4));\n    map.put(0, Arrays.asList(3));\n    map.put(2, Arrays.asList(2, 5));\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "asList", "focal_loc": [92, 26]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::multimapValueSelector", "test_loc": [97, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void multimapValueSelector() {\n    Ix<Map<Integer, Collection<Integer>>> source = Ix.range(1, 5).collectToMultimap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    }, new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v * v;\n        }\n    });\n\n    Map<Integer, Collection<Integer>> map = new HashMap<Integer, Collection<Integer>>();\n    map.put(1, Arrays.asList(1, 16));\n    map.put(0, Arrays.asList(9));\n    map.put(2, Arrays.asList(4, 25));\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "asList", "focal_loc": [115, 26]}
{"test_id": "akarnokd-ixjava/akarnokd-ixjava-add721b/src/test/java/ix/ToMapTest.java::multimapEmpty", "test_loc": [119, 4], "test": "@SuppressWarnings(\"unchecked\")\n@Test\npublic void multimapEmpty() {\n    Ix<Map<Integer, Collection<Integer>>> source = Ix.<Integer>empty().collectToMultimap(new IxFunction<Integer, Integer>() {\n        @Override\n        public Integer apply(Integer v) {\n            return v % 3;\n        }\n    });\n\n    Map<Integer, Collection<Integer>> map = new HashMap<Integer, Collection<Integer>>();\n\n    IxTestHelper.assertValues(source, map);\n}", "focal_id": "apply", "focal_loc": [122, 179]}
