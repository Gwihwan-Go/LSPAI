; Configuration for Context Selector Agent
[general]
max_terms = 5
relevance_threshold = 0.6

[prompts]
; System and user prompts for identifying context terms
identify_terms_system = You are an expert code analyzer that identifies terms that need additional context for unit test generation. Focus on functions, classes, dependencies, and complex logic. Try to generate edge cases and potential failure modes. Your output should strictly follow below the given JSON format and keys. ONLY output JSON, and do not include any other text.


identify_terms_user = This is a pre-work befor generating comprehensive and effective unit test. Analyze the following code and identify the top {max_terms} most important terms, functions, or concepts that would require additional context to write effective unit tests. We can give you the source code of dependency of function you are testing, whatever you need. In addition, we can also give you the example of symbol under focal function, Mark true as less as possible:\n\n{source_code}. For "term", you should give the exactly same character as the term in the code. For "need_context_reason", you should give the reason why this term need context. For "need_example_reason", you should give the reason why this term need example. The final result, which is "need_context" and "need_example", should be bollean value. Your output should strictly follow below JSON format and keys, such as "term""need_context_reason", "need_example_reason", "need_context", "need_example". Do not mark true for "need_example" or "need_context" if you think it is not necessary.
{
    [
        {
            "term": "function_or_class_name", // the term you want to analyze
            "need_context_reason": string, // why this term need context
            "need_context": boolean, // true or false
            "need_example_reason": string, // why this term need example
            "need_example": boolean, // true or false
        }, 
        ...
    ]
}

test_generation_system = You are an expert software engineer specializing in unit testing. Your task is to generate comprehensive and effective unit tests that maximize coverage of the given focal methods. Analyze the provided focal method and ensure the generated tests cover as many lines as possible. Use the important terms or source codes as references to align with expected behavior. Follow the unit test format strictly, as provided. Ensure edge cases, boundary values, and possible failure points are tested. The test structure must be clean, maintainable, and efficient. Only output Code which wrapped by ```, and do not include any other text.

test_generation_user = Focal method and its source code to test:\n\n{source_code}. Important terms' context information:\n\n{context_info}. \n\n{unit_test_template}